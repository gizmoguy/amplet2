--- a/amplet2-client.init      1970-01-01 00:00:00.000000000 +0000
+++ b/amplet2-client.init      2022-06-07 06:22:31.000000000 +0000
@@ -0,0 +1,266 @@
+#!/bin/sh
+### BEGIN INIT INFO
+# Provides:          amplet2
+# Required-Start:    $remote_fs $network $local_fs $named $syslog
+# Required-Stop:     $remote_fs $network $local_fs $named $syslog
+# Should-Start:      rabbitmq-server
+# Default-Start:     2 3 4 5
+# Default-Stop:      0 1 6
+# Short-Description: AMP measurement daemon
+# Description:       AMP measurement daemon
+### END INIT INFO
+
+# Author: Brendon Jones <brendonj@waikato.ac.nz>
+
+# For return codes see:
+# http://refspecs.linuxbase.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
+
+# source function library
+. /etc/rc.d/init.d/functions
+
+PATH=$PATH:/usr/lib/rabbitmq/bin
+DESC="amplet2 measurement client"
+PKG_NAME=amplet2-client
+DAEMON_NAME=amplet2             # Introduce the short server's name here
+DAEMON=/usr/sbin/$DAEMON_NAME   # Introduce the server's location here
+DAEMON_OPTS="-d"
+SCRIPTNAME=/etc/init.d/$PKG_NAME
+CONFDIR=/etc/amplet2/clients
+PIDDIR=/var/run/amplet2
+
+# Exit if the package is not installed
+if [ ! -x $DAEMON ]; then
+    echo "Cannot find $DAEMON, aborting"
+    exit 5
+fi
+
+#
+# Wait for the pidfile to be populated and to contain a running pid
+#
+do_wait()
+{
+    attempt=0
+    while [ $attempt -lt 100 ]; do
+        attempt=$((attempt+1))
+        if [ -f $1 ]; then
+            # check if valid, running pid
+            ps -p `cat $1` > /dev/null
+            if [ $? -eq 0 ]; then
+                # return success, amplet2 client started ok
+                return 0
+            fi
+        fi
+        sleep 0.1
+    done
+    # return failure, for some reason it didn't start properly
+    return 2
+}
+
+
+#
+# Make sure that the configuration directories exist and have the appropriate
+# permissions, and that rabbitmq has the correct plugins enabled.
+#
+do_local_config()
+{
+    # If using a local rabbitmq broker then check that it is configured. For
+    # now we'll make the assumption that if the user and control program exist
+    # then we should probably be using rabbitmq.
+    if getent passwd rabbitmq > /dev/null && [ -x /usr/sbin/rabbitmqctl ]; then
+        # add the rabbitmq user to the amplet group to access keys
+        usermod -a -G amplet rabbitmq
+
+        # make sure the shovel plugin is enabled
+        if ! rabbitmq-plugins list -e rabbitmq_shovel | \
+                cut -d ' ' -f 2 | grep -qx rabbitmq_shovel; then
+            echo -n "Enabling rabbitmq shovel plugin for $DAEMON_NAME"
+            rabbitmq-plugins enable rabbitmq_shovel >/dev/null || exit $?
+            echo
+        fi
+    fi
+
+}
+
+
+#
+# Function that starts the daemon/service
+#
+do_start()
+{
+    SUCCESS=0
+    FAILED=0
+
+    do_local_config
+
+    # For every config file, try to run an amplet client
+    for client in ${CONFDIR}/*.conf; do
+        NAME=${client#$CONFDIR/}
+        NAME=${NAME%.conf}
+        PIDFILE=${PIDDIR}/${NAME%.conf}.pid
+
+        # TODO return appropriate thing if already running
+        echo -n "Starting ${DESC}" $NAME
+        # use start-stop-daemon --test?
+        daemon --pidfile $PIDFILE $DAEMON $DAEMON_OPTS -c $client -p $PIDFILE
+
+        # if the client was started right now then wait for the pidfile
+        # to be correct before continuing (makes sure puppet doesn't try
+        # to start extra copies thinking it isn't running ok).
+        if [ $? -eq 0 ]; then
+            # this will update $? for the next check, which is fine
+            do_wait $PIDFILE
+        fi
+
+        case "$?" in
+            0|1) SUCCESS=$((SUCCESS+1)); \
+                echo
+                ;;
+            2|3) FAILED=$((FAILED+1)); \
+                echo
+                ;;
+        esac
+    done
+
+    # No failures and at least one success, return success
+    if ([ $FAILED -eq 0 ] && [ $SUCCESS -gt 0 ]); then
+        return 0
+    fi
+
+    # Some failures and some successes, return warning
+    if ([ $FAILED -gt 0 ] && [ $SUCCESS -gt 0 ]); then
+        return 255
+    fi
+
+    # No successes, return failed
+    return 1
+}
+
+
+#
+# Function that stops the daemon/service
+#
+do_stop()
+{
+    SUCCESS=0
+    FAILED=0
+
+    for pidfile in ${PIDDIR}/*.pid; do
+
+        if [ ! -f $pidfile ]; then
+            continue
+        fi
+
+        NAME=${pidfile#$PIDDIR/}
+        NAME=${NAME%.pid}
+        PID=`cat $pidfile`
+
+        echo -n "Stopping ${DESC}" $NAME
+        killproc -p $pidfile $DAEMON
+
+        if [ -n "$PID" ]; then
+            # if there are any children left, send them a SIGTERM
+            /usr/bin/pgrep -s $PID > /dev/null
+            if [ $? -eq 0 ]; then
+                /bin/kill -s TERM -- -$PID
+            fi
+
+            # make sure they are stopped, otherwise send a SIGKILL
+            /usr/bin/pgrep -s $PID > /dev/null
+            if [ $? -eq 0 ]; then
+                sleep 3
+                /bin/kill -s KILL -- -$PID 2> /dev/null
+            fi
+        fi
+
+        if `/usr/bin/pgrep -s $PID > /dev/null`; then
+            FAILED=$((FAILED+1));
+            echo
+        else
+            SUCCESS=$((SUCCESS+1));
+            echo
+        fi
+    done
+
+    # No failures, return success (could have zero successes if none running)
+    if [ $FAILED -eq 0 ]; then
+        return 0
+    fi
+
+    # Some failures and some successes, return warning
+    if ([ $FAILED -gt 0 ] && [ $SUCCESS -gt 0 ]); then
+        return 255
+    fi
+
+    # Some failures and no successes, return failed
+    return 1
+}
+
+
+#
+#
+#
+do_status() {
+    RETVAL=0
+    for client in ${CONFDIR}/*.conf; do
+        NAME=${client#$CONFDIR/}
+        NAME=${NAME%.conf}
+        PIDFILE=${PIDDIR}/${NAME%.conf}.pid
+
+        status -p $PIDFILE "$DAEMON" "$NAME"
+        if [ $? -gt 0 ]; then
+            RETVAL=1
+        fi
+    done
+    return $RETVAL
+}
+
+
+#
+# Function that sends a SIGHUP to the daemon/service
+#
+do_reload() {
+    #
+    # If the daemon can reload its configuration without
+    # restarting (for example, when it is sent a SIGHUP),
+    # then implement that here.
+    #
+    for client in ${CONFDIR}/*.conf; do
+        NAME=${client#$CONFDIR/}
+        NAME=${NAME%.conf}
+        PIDFILE=${PIDDIR}/${NAME%.conf}.pid
+
+        echo -n "Reloading ${DESC}" $NAME
+        killproc -p $PIDFILE $DAEMON -HUP
+        echo
+    done
+    return 0
+}
+
+
+case "$1" in
+    start)
+        do_start
+        ;;
+
+    stop)
+        do_stop
+        ;;
+
+  status)
+        do_status && exit 0 || exit $?
+       ;;
+
+    reload|force-reload)
+        do_reload
+        ;;
+
+    restart)
+        do_stop
+        do_start
+        ;;
+
+    *)
+        echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload}" >&2
+	exit 3
+	;;
+esac
